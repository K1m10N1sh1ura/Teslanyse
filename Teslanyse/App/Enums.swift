//
//  Enums.swift
//  Teslanyse
//
//  Created by Kimio Nishiura on 03.03.24.
//

import Foundation

protocol WithDescription {
    var description: String { get }
}

protocol WithDefinition {
    var definition: String { get }
}

enum QuarterDataEnum: CaseIterable, WithDescription {
    case revenue
    case profit
    case margin
    case automotiveRevenue
    case automotiveCostOfRevenue
    case automotiveProfit
    case automotiveMargin
    case automotiveCostOfGoodsSold
    case deliveredCars
    case producedCars
    case deliveredModel3Y
    case deliveredOtherModels
    case producedModel3Y
    case producedOtherModels
    case energyRevenue
    case energyCostOfRevenue
    case energyStorage
    case energyProfit
    case energyMargin
    case energyCostOfGoodsSold
    case solarDeployed
    case superchargerStations
    case superchargerConnectors
    case superchargerStationsAccumulated
    case superchargerConnectorsAccumulated
    
    var description: String {
        switch self {
        case .revenue:
            "Revenue"
        case .profit:
            "Profit"
        case .margin:
            "Margin"
        case .automotiveRevenue:
            "Automotive revenue"
        case .automotiveCostOfRevenue:
            "Automotive cost of revenue"
        case .automotiveProfit:
            "Automotive profit"
        case .automotiveMargin:
            "Automotive margin"
        case .automotiveCostOfGoodsSold:
            "Automotive cost of goods sold"
        case .deliveredCars:
            "Delivered cars"
        case .producedCars:
            "Produced cars"
        case .deliveredModel3Y:
            "Delivered Model 3 and Y"
        case .deliveredOtherModels:
            "Delivered other models"
        case .producedModel3Y:
            "Produced Model 3 and Y"
        case .producedOtherModels:
            "Produced other models"
        case .energyRevenue:
            "Energy revenue"
        case .energyCostOfRevenue:
            "Energy cost of revenue"
        case .energyStorage:
            "Energy storage"
        case .energyProfit:
            "Energy profit"
        case .energyMargin:
            "Energy margin"
        case .energyCostOfGoodsSold:
            "Energy cost of goods sold"
        case .solarDeployed:
            "Solar deployed"
        case .superchargerStations:
            "Supercharger stations"
        case .superchargerConnectors:
            "Supercharger connectors"
        case .superchargerStationsAccumulated:
            "Supercharger stations accumulated"
        case .superchargerConnectorsAccumulated:
            "Supercharger connectors accumulated"
        }
    }
}

enum TeslaModel: CaseIterable, WithDescription, WithDefinition {
    case model3Y, otherModels, allModels
    
    var description: String {
        switch self {
        case .model3Y:
            return "Model 3/Y"
        case .otherModels:
            return "Other models"
        case .allModels:
            return "Total"
        }
    }
    
    var definition: String {
        switch self {
        case .model3Y:
            return "Model 3/Y"
        case .otherModels:
            return "Other models"
        case .allModels:
            return "Total"
        }
    }
}

enum TeslaSaleState: CaseIterable, WithDescription, WithDefinition {
    case produced, delivered
    
    var description: String {
        switch self {
        case .produced:
            return "Produced"
        case .delivered:
            return "Delivered"
        }
    }
    var definition: String {
        switch self {
        case .produced:
            return "Produced"
        case .delivered:
            return "Delivered"
        }
    }
}


enum FinancialDataOption: CaseIterable, WithDescription, WithDefinition {
    case revenue, profit, grossGAAPMargin
//  case costOfRevenue
//    case operatingExpenses
//    case incomeFromOperations
//    case adjustedEBITDA
//    case adjustedEBITDAMargin
//    case netIncomeGAAP
//    case netIncomeNonGAAP
//    case EPSGAAP
//    case EPSNonGAAP
//    case cash
//    case freeCashFlow
//    case netCashProvidedByOperatingActivities
//    case capitalExpenditures
//    case researchAndDevelopementOperatingExpenses
//    case sellingGeneralAndAdministrativeOperatingExpenses
//    case restructuringAndOtherOperatingExpenses
    
    var description: String {
        switch self {
        case .revenue:
            return "Revenue"
        case .profit:
            return "Profit"
        case .grossGAAPMargin:
            return "Gross GAAP margin"
        }
    }
    
    var definition: String {
        switch self {
        case .revenue:
            return "Revenue refers to the total income generated by a business through its normal business operations. It's the money earned from selling goods or services."
        case .profit:
            return "Profit is the financial gain realized when the revenue earned from business activities exceeds the expenses, costs, and taxes incurred in generating that revenue."
        case .grossGAAPMargin:
            return "Gross GAAP Margin is a financial metric that represents the percentage of revenue remaining after deducting the cost of goods sold (COGS) from total revenue. It indicates the profitability of a company's core business activities, excluding other operating expenses such as selling, general, and administrative expenses."
        }
    }
}

enum AutomotiveFinancialDataOption: CaseIterable, WithDescription, WithDefinition {
    case revenue, costOfRevenue, profit, margin, cogs
    
//    case automotiveSalesRevenue
//    case regulatoryCreditRevenue
//    case automotiveLeasingRevenue
//    case automotiveCostOfRevenue
//    case leasingCostOfRevenue
    
    var description: String {
        switch self {
        case .revenue:
            return "Revenue"
        case .costOfRevenue:
            return "Cost of revenue"
        case .profit:
            return "Profit"
        case .margin:
            return "Margin"
        case .cogs:
            return "Cost of goods sold"
        }
    }
    
    var definition: String {
        switch self {
        case .revenue:
            return "Revenue refers to the total income generated by a business through its normal business operations. It's the money earned from selling goods or services."
        case .costOfRevenue:
            return "Cost of Revenue is similar to COGS but may encompass additional expenses beyond the direct costs associated with producing goods, such as sales commissions, shipping costs, and other expenses directly related to generating revenue. It represents the total cost incurred to generate the revenue from a business's primary operations."
        case .profit:
            return "Profit is the financial gain realized when the revenue earned from business activities exceeds the expenses, costs, and taxes incurred in generating that revenue."
        case .margin:
            return "Margin typically refers to the difference between the selling price of a product or service and the cost incurred to produce or provide it. Gross margin specifically refers to the difference between revenue and the cost of goods sold (COGS), expressed as a percentage."
        case .cogs:
            return "Cost of Goods Sold (COGS) represents the direct costs associated with producing or purchasing the goods that a company sells during a specific period. These costs typically include materials, labor, and overhead expenses directly tied to production."
        }
    }
}

enum EnergyOptions: CaseIterable, WithDescription, WithDefinition {
    case storageDeployed, solarDeployed
    
    var description: String {
        switch self {
        case .storageDeployed:
            return "Storage"
        case .solarDeployed:
            return "Solar"
        }
    }
    
    var definition: String {
        switch self {
        case .storageDeployed:
            return "Storage"
        case .solarDeployed:
            return "Solar"
        }
    }
}

enum EnergyFinancialDataOption: CaseIterable, WithDescription, WithDefinition {
    case revenue, costOfRevenue, profit, margin, cogs
    
    var description: String {
        switch self {
        case .revenue:
            return "Revenue"
        case .costOfRevenue:
            return "Cost of revenue"
        case .profit:
            return "Profit"
        case .margin:
            return "Margin"
        case .cogs:
            return "Cost of goods sold"
        }
    }
    
    var definition: String {
        switch self {
        case .revenue:
            return "Revenue refers to the total income generated by a business through its normal business operations. It's the money earned from selling goods or services."
        case .costOfRevenue:
            return "Cost of Revenue is similar to COGS but may encompass additional expenses beyond the direct costs associated with producing goods, such as sales commissions, shipping costs, and other expenses directly related to generating revenue. It represents the total cost incurred to generate the revenue from a business's primary operations."
        case .profit:
            return "Profit is the financial gain realized when the revenue earned from business activities exceeds the expenses, costs, and taxes incurred in generating that revenue."
        case .margin:
            return "Margin typically refers to the difference between the selling price of a product or service and the cost incurred to produce or provide it. Gross margin specifically refers to the difference between revenue and the cost of goods sold (COGS), expressed as a percentage."
        case .cogs:
            return "Cost of Goods Sold (COGS) represents the direct costs associated with producing or purchasing the goods that a company sells during a specific period. These costs typically include materials, labor, and overhead expenses directly tied to production."
        }
    }
}

enum SuperchargerOption: CaseIterable, WithDescription, WithDefinition {
    case stations, connectors, stationsAccumulated, connectorsAccumulated
    
    var description: String {
        switch self {
        case .stations:
            return "Stations"
        case .connectors:
            return "Connectors"
        case .stationsAccumulated:
            return "Stations accumulated"
        case .connectorsAccumulated:
            return "Connectors accumulated"
        }
    }
    
    var definition: String {
        switch self {
        case .stations:
            return "Stations"
        case .connectors:
            return "Connectors"
        case .stationsAccumulated:
            return "Stations accumulated"
        case .connectorsAccumulated:
            return "Connectors accumulated"
        }
    }
    
    
}

enum NumberFormatType {
    case dollar, percent, number, power, energy
}

enum ChartStyle: CaseIterable {
    case barChart, lineChart, pointChart
    
    var description: String {
        switch self {
        case .barChart:
            "Bar Chart"
        case .lineChart:
            "Line Chart"
        case .pointChart:
            "Point Chart"
        }
    }
}

enum ChartColor: CaseIterable {
    case gray, blue, green, red, yellow
    
    var description: String {
        switch self {
        case .gray:
            "Gray"
        case .blue:
            "Blue"
        case .green:
            "Green"
        case .red:
            "Red"
        case .yellow:
            "Yellow"
        }
    }
}

