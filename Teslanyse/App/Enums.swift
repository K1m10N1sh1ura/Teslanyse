//
//  Enums.swift
//  Teslanyse
//
//  Created by Kimio Nishiura on 03.03.24.
//

import Foundation

protocol WithDescription {
    var description: String { get }
}

protocol WithDefinition {
    var definition: String { get }
}

enum QuarterDataEnum: String, CaseIterable, WithDescription {
    case revenue = "Revenue"
    case profit = "Profit"
    case margin = "Margin"
    case automotiveRevenue = "Automotive revenue"
    case automotiveCostOfRevenue = "Automotive cost of revenue"
    case automotiveProfit = "Automotive profit"
    case automotiveMargin = "Automotive margin"
    case automotiveCostOfGoodsSold = "Automotive cost of goods sold"
    case deliveredCars = "Delivered cars"
    case producedCars = "Produced cars"
    case deliveredModel3Y = "Delivered Model 3 and Y"
    case deliveredOtherModels = "Delivered other models"
    case producedModel3Y = "Produced Model 3 and Y"
    case producedOtherModels = "Produced other models"
    case energyRevenue = "Energy revenue"
    case energyCostOfRevenue = "Energy cost of revenue"
    case energyStorage = "Energy storage"
    case energyProfit = "Energy profit"
    case energyMargin = "Energy margin"
    case energyCostOfGoodsSold = "Energy cost of goods sold"
    case solarDeployed = "Solar deployed"
    case superchargerStations = "Supercharger stations"
    case superchargerConnectors = "Supercharger connectors"
    case superchargerStationsAccumulated = "Supercharger stations accumulated"
    case superchargerConnectorsAccumulated = "Supercharger connectors accumulated"
    
    var description: String {
        return self.rawValue
    }
}

enum TeslaVehicleModel: String, CaseIterable, WithDescription, WithDefinition {
    case model3Y = "Model 3/Y"
    case other = "Other models"
    case all = "Total"
    
    var description: String {
        return self.rawValue
    }
    
    var definition: String {
        switch self {
        case .model3Y:
            return "Includes Tesla Model 3 and Model Y vehicles."
        case .other:
            return "Includes Tesla Model X, Model Y, Cybertruck and Semi."
        case .all:
            return "Inlcudes each Tesla vehicle model"
        }
    }
}

enum VehicleSaleState: String, CaseIterable, WithDescription, WithDefinition {
    case produced = "Produced"
    case delivered = "Delivered"
    
    var description: String {
        return self.rawValue
    }
    
    var definition: String {
        switch self {
        case .produced:
            return "Produced"
        case .delivered:
            return "Delivered"
        }
    }
}

enum FinancialDataOption: String, CaseIterable, WithDescription, WithDefinition {
    case revenue = "Revenue"
    case profit = "Profit"
    case grossGAAPMargin = "Grosw GAAP margin"

    var description: String {
        return self.rawValue
    }
    
    var definition: String {
        switch self {
        case .revenue:
            return "Revenue refers to the total income generated by a business through its normal business operations. It's the money earned from selling goods or services."
        case .profit:
            return "Profit is the financial gain realized when the revenue earned from business activities exceeds the expenses, costs, and taxes incurred in generating that revenue."
        case .grossGAAPMargin:
            return "Gross GAAP Margin is a financial metric that represents the percentage of revenue remaining after deducting the cost of goods sold (COGS) from total revenue. It indicates the profitability of a company's core business activities, excluding other operating expenses such as selling, general, and administrative expenses."
        }
    }
}

enum AutomotiveFinancialDataOption: String, CaseIterable, WithDescription, WithDefinition {
    case revenue = "Revenue"
    case costOfRevenue = "Cost of revenue"
    case profit = "Profit"
    case margin = "Margin"
    case cogs = "Cost of goods sold"

    var description: String {
        return self.rawValue
    }
    
    var definition: String {
        switch self {
        case .revenue:
            return "Revenue refers to the total income generated by a business through its normal business operations. It's the money earned from selling goods or services."
        case .costOfRevenue:
            return "Cost of Revenue is similar to COGS but may encompass additional expenses beyond the direct costs associated with producing goods, such as sales commissions, shipping costs, and other expenses directly related to generating revenue. It represents the total cost incurred to generate the revenue from a business's primary operations."
        case .profit:
            return "Profit is the financial gain realized when the revenue earned from business activities exceeds the expenses, costs, and taxes incurred in generating that revenue."
        case .margin:
            return "Margin typically refers to the difference between the selling price of a product or service and the cost incurred to produce or provide it. Gross margin specifically refers to the difference between revenue and the cost of goods sold (COGS), expressed as a percentage."
        case .cogs:
            return "Cost of Goods Sold (COGS) represents the direct costs associated with producing or purchasing the goods that a company sells during a specific period. These costs typically include materials, labor, and overhead expenses directly tied to production."
        }
    }
}

enum EnergyOptions: String, CaseIterable, WithDescription, WithDefinition {
    case storageDeployed = "Storage"
    case solarDeployed = "Solar"
    
    var description: String {
        return self.rawValue
    }
    
    var definition: String {
        switch self {
        case .storageDeployed:
            return "Storage"
        case .solarDeployed:
            return "Solar"
        }
    }
}

enum EnergyFinancialDataOption: String, CaseIterable, WithDescription, WithDefinition {
    case revenue = "Revenue"
    case costOfRevenue = "Cost of revenue"
    case profit = "Profit"
    case margin = "Margin"
    case cogs = "Cost of goods sold"
    
    var description: String {
        return self.rawValue
    }
    
    var definition: String {
        switch self {
        case .revenue:
            return "Revenue refers to the total income generated by a business through its normal business operations. It's the money earned from selling goods or services."
        case .costOfRevenue:
            return "Cost of Revenue is similar to COGS but may encompass additional expenses beyond the direct costs associated with producing goods, such as sales commissions, shipping costs, and other expenses directly related to generating revenue. It represents the total cost incurred to generate the revenue from a business's primary operations."
        case .profit:
            return "Profit is the financial gain realized when the revenue earned from business activities exceeds the expenses, costs, and taxes incurred in generating that revenue."
        case .margin:
            return "Margin typically refers to the difference between the selling price of a product or service and the cost incurred to produce or provide it. Gross margin specifically refers to the difference between revenue and the cost of goods sold (COGS), expressed as a percentage."
        case .cogs:
            return "Cost of Goods Sold (COGS) represents the direct costs associated with producing or purchasing the goods that a company sells during a specific period. These costs typically include materials, labor, and overhead expenses directly tied to production."
        }
    }
}

enum SuperchargerInfrastructure: String, CaseIterable, WithDescription, WithDefinition {
    case stations = "Stations"
    case connectors = "Connectors"
    case stationsAccumulated = "Stations accumulated"
    case connectorsAccumulated = "Connectors accumulated"
    
    var description: String {
        return self.rawValue
    }
    
    var definition: String {
        switch self {
        case .stations:
            return "Stations"
        case .connectors:
            return "Connectors"
        case .stationsAccumulated:
            return "Stations accumulated"
        case .connectorsAccumulated:
            return "Connectors accumulated"
        }
    }
    
    
}

enum NumberFormatType {
    case dollar
    case percent
    case number
    case power
    case energy
}

enum ChartStyle: String, CaseIterable {
    case barChart = "Bar chart"
    case lineChart = "Line chart"
    case pointChart = "Point chart"
    
    var description: String {
        return self.rawValue
    }
}

enum ChartColor: String, CaseIterable {
    case gray = "Gray"
    case blue = "Blue"
    case green = "Green"
    case red = "Red"
    case yellow = "Yellow"
 
    var description: String {
        return self.rawValue
    }
}

